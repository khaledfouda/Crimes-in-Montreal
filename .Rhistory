catg.rep = function(c) catg.en[which(catg.fr==c)]
quart.fr = table(data$QUART) %>% names
quart.en = c('Day', 'Night', 'Evening')
quart.rep = function(c) quart.en[which(quart.fr==c)]
# Apply changes and extract the Year and month
data %>% mutate(CATEGORIE = mapply(catg.rep,CATEGORIE),
MONTH = month(as.Date(DATE, "%Y-%m-%d")),
YEAR = year(as.Date(DATE, "%Y-%m-%d")),
QUART = mapply(quart.rep, QUART),
STREET = NOM_TEMP, NOM_TEMP = NULL,
MUNICIP = MUN_TEMP, MUN_TEMP = NULL) -> data
#-----------------------------------------------------------------------
#-----------------------------------------------------------------------
write.csv(data, './data/Police_Interventions')
#-----------------------------------------------------------------------
write.csv(data, './data/Police_Interventions.csv')
#-------------------------------------------------------------------
# Discard obsevations in May 2021 since the data isn't complete atm.
data %>% filter( (YEAR ==2021 & MONTH==5 ))
#-------------------------------------------------------------------
# Discard obsevations in May 2021 since the data isn't complete atm.
data %>% filter( !(YEAR ==2021 & MONTH==5 ))
#-------------------------------------------------------------------
# Discard obsevations in May 2021 since the data isn't complete atm.
data %>% filter( !(YEAR ==2021 & MONTH==5 )) -> data
#-----------------------------------------------------------------------
write.csv(data, './data/Police_Interventions.csv')
#require(readxl)
require(lubridate)
require(dplyr)
pdq = read.csv('./data/pdq.csv')
interv = read.csv('./data/interventionscitoyendo.csv')
# convert "POSTE DE QUARTIER ID" to only the ID
pdq$PDQ = mapply( function(d) strsplit(d,'POSTE DE QUARTIER ')[[1]][2],pdq$DESC_LIEU)
# Join the two dataframe based on the PDQ number
data = merge(interv, pdq, by='PDQ', all.x = TRUE)
names(data)
# Keep only relevant columns
data %>% select( CATEGORIE, DATE, QUART, NOM_TEMP, MUN_TEMP) -> data
# Translate Categories and day time
catg.fr = table(data$CATEGORIE) %>% names
catg.en = c("Resulting Death", "Break and Enter", "Mischief", "Auto Contents",
"Auto theft", "Robbery")
catg.rep = function(c) catg.en[which(catg.fr==c)]
quart.fr = table(data$QUART) %>% names
quart.en = c('Day', 'Night', 'Evening')
quart.rep = function(c) quart.en[which(quart.fr==c)]
# Apply changes and extract the Year and month
data %>% mutate(CATEGORIE = mapply(catg.rep,CATEGORIE),
MONTH = month(as.Date(DATE, "%Y-%m-%d")),
YEAR = year(as.Date(DATE, "%Y-%m-%d")),
QUART = mapply(quart.rep, QUART),
STREET = NOM_TEMP, NOM_TEMP = NULL,
MUNICIP = MUN_TEMP, MUN_TEMP = NULL) -> data
#-------------------------------------------------------------------
# Discard obsevations in May 2021 since the data isn't complete atm.
data %>% filter( !(YEAR ==2021 & MONTH==5 )) -> data
#-----------------------------------------------------------------------
write.csv(data, './data/Police_Interventions.csv')
#-------------------------------------
require(reticulate)
reverse_geo(lat = 38.895865, long = -77.0307713, method = 'osm', verbose = TRUE)
#require(readxl)
require(lubridate)
require(dplyr)
pdq = read.csv('./data/pdq.csv')
interv = read.csv('./data/interventionscitoyendo.csv')
# convert "POSTE DE QUARTIER ID" to only the ID
pdq$PDQ = mapply( function(d) strsplit(d,'POSTE DE QUARTIER ')[[1]][2],pdq$DESC_LIEU)
# Join the two dataframe based on the PDQ number
data = merge(interv, pdq, by='PDQ', all.x = TRUE)
names(data)
# Keep only relevant columns
data %>% select( CATEGORIE, DATE, QUART, NOM_TEMP, MUN_TEMP,
LONGITUDE.x, LATITUDE.x) -> data
# Translate Categories and day time
catg.fr = table(data$CATEGORIE) %>% names
catg.en = c("Resulting Death", "Break and Enter", "Mischief", "Auto Contents",
"Auto theft", "Robbery")
catg.rep = function(c) catg.en[which(catg.fr==c)]
quart.fr = table(data$QUART) %>% names
quart.en = c('Day', 'Night', 'Evening')
quart.rep = function(c) quart.en[which(quart.fr==c)]
# Apply changes and extract the Year and month
data %>% mutate(CATEGORIE = mapply(catg.rep,CATEGORIE),
MONTH = month(as.Date(DATE, "%Y-%m-%d")),
YEAR = year(as.Date(DATE, "%Y-%m-%d")),
QUART = mapply(quart.rep, QUART),
STREET = NOM_TEMP, NOM_TEMP = NULL,
MUNICIP = MUN_TEMP, MUN_TEMP = NULL) -> data
#-------------------------------------------------------------------
# Discard obsevations in May 2021 since the data isn't complete atm.
data %>% filter( !(YEAR ==2021 & MONTH==5 )) -> data
#-----------------------------------------------------------------------
write.csv(data, './data/Police_Interventions.csv')
#-------------------------------------
require(reticulate)
require(tidygeocoder)
reverse_geo(lat = 38.895865, long = -77.0307713, method = 'osm', verbose = TRUE)
reverse_geo(lat = data$LATITUDE.x[1], long = data$LONGITUDE.x[1], method = 'osm', verbose = TRUE)
reverse_geo(lat = data$LATITUDE.x[5], long = data$LONGITUDE.x[5], method = 'osm', verbose = TRUE)
reverse_geo(lat = data$LATITUDE.x[5], long = data$LONGITUDE.x[5],
method = 'geocodio', verbose = TRUE)
GEOCODIO_API_KEY=29a070b862a367aba98d6dd6a626a082b676196
GEOCODIO_API_KEY="29a070b862a367aba98d6dd6a626a082b676196"
reverse_geo(lat = data$LATITUDE.x[5], long = data$LONGITUDE.x[5],
method = 'geocodio', verbose = TRUE)
usethis::edit_r_environ()
reverse_geo(lat = data$LATITUDE.x[5], long = data$LONGITUDE.x[5],
method = 'geocodio', verbose = TRUE)
reverse_geo(lat = data$LATITUDE.x[5], long = data$LONGITUDE.x[5],
method = 'geocodio', verbose = TRUE)
reverse_geo(lat = data$LATITUDE.x[5], long = data$LONGITUDE.x[5],
method = 'geocodio', verbose = TRUE)
reverse_geo(lat = data$LATITUDE.x[5], long = data$LONGITUDE.x[5],
method = 'geocodio', verbose = TRUE)
require(rgeocodio)
file.edit("~/.Renviron")
Sys.setenv(GEOCODIO_API_KEY="29a070b862a367aba98d6dd6a626a082b676196")
reverse_geo(lat = data$LATITUDE.x[5], long = data$LONGITUDE.x[5],
method = 'geocodio', verbose = TRUE)
reverse_geo(lat = data$LATITUDE.x[5], long = data$LONGITUDE.x[5],
method = 'osm', verbose = TRUE)
reverse_geo(lat = data$LATITUDE.x[5], long = data$LONGITUDE.x[5],
method = 'geocodio', verbose = TRUE)
reverse_geo(lat = data$LATITUDE.x[5], long = data$LONGITUDE.x[5],
method = 'geocodio', verbose = TRUE)[1]
o=reverse_geo(lat = data$LATITUDE.x[5], long = data$LONGITUDE.x[5],
method = 'geocodio', verbose = TRUE)
o
o[1]
as.list(o)
as.list(o)$address
strsplit(as.list(o)$address,',')
strsplit(as.list(o)$address,',')[2]
strsplit(as.list(o)$address,',')
strsplit(as.list(o)$address[[1]],',')
as.list(o)$address[[1]]
strsplit(as.list(o)$address[1],',')
as.list(o)$address[1]
oo = as.list(o)$address[1]
oo
oo[1]
strsplit(oo)
strsplit(oo,',')
strsplit(oo,',')[1]
unlist(strsplit(oo,','))
unlist(strsplit(oo,','))[1]
unlist(strsplit(oo,','))[2]
oo =
unlist(strsplit(as.list(o)$address[1],','))[2]
as.list(o)$address[1]
oo =
unlist(strsplit(as.list(o)$address,','))[2]
as.list(o)$address
unlist(strsplit(as.list(o)$address,','))
unlist(strsplit(as.list(o)$address,','))[2]
oo =
unlist(strsplit(as.list(o)$address,','))[2]
unlist(strsplit(as.list(o)$address,','))[2]
unlist(strsplit(as.list(o)$address,','))[2]
get_neighb = function(long, lat){
o=reverse_geo(lat = lat, long = long, method = 'geocodio', verbose = TRUE)
unlist(strsplit(as.list(o)$address,','))[2]
}
mapply(get_neighb, data[1:5,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb = function(d){
o=reverse_geo(lat = d[1], long = d[2], method = 'geocodio', verbose = TRUE)
unlist(strsplit(as.list(o)$address,','))[2]
}
mapply(get_neighb, data[1:5,] %>% select(LONGITUDE.x,LATITUDE.x))
data[1:5,] %>% select(LONGITUDE.x,LATITUDE.x)
get_neighb = function(d){
print(d)
o=reverse_geo(lat = d[1], long = d[2], method = 'geocodio', verbose = FALSE)
unlist(strsplit(as.list(o)$address,','))[2]
}
mapply(get_neighb, data[1:5,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb = function(d){
print(d)
o=reverse_geo(lat = d[1], long = d[2], method = 'geocodio', verbose = FALSE)
return(unlist(strsplit(as.list(o)$address,','))[2])
}
mapply(get_neighb, data[1:5,] %>% select(LONGITUDE.x,LATITUDE.x))
mapply(get_neighb, data[1:1,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb(data[1:1,] %>% select(LONGITUDE.x,LATITUDE.x))
print(d,d[1])
get_neighb = function(d){
print(d,d[1])
o=reverse_geo(lat = d[1], long = d[2], method = 'geocodio', verbose = FALSE)
return(unlist(strsplit(as.list(o)$address,','))[2])
}
mapply(get_neighb, data[1:1,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb(data[1:1,] %>% select(LONGITUDE.x,LATITUDE.x))
data[1:1,] %>% select(LONGITUDE.x,LATITUDE.x)
get_neighb = function(d){
print(d)
o=reverse_geo(lat = d[2], long = d[1], method = 'geocodio', verbose = FALSE)
return(unlist(strsplit(as.list(o)$address,','))[2])
}
get_neighb(data[1:1,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb = function(d){
#print(d)
o=reverse_geo(lat = d[2], long = d[1], method = 'geocodio', verbose = FALSE)
return(unlist(strsplit(as.list(o)$address,','))[2])
}
mapply(get_neighb, data[1:1,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb = function(d){
#print(d)
o=reverse_geo(lat = d[2], long = d[1], method = 'geocodio', verbose = FALSE)
return(unlist(strsplit(as.list(o)$address,','))[2])
}
mapply(get_neighb, data[1:5,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb(data[1:1,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb(data[1:5,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb(data[2,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb(data[3,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb(data[4,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb(data[5,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb(data[6,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb(data[8,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb = function(d){
#print(d)
o=reverse_geo(lat = d[2], long = d[1], method = 'geocodio', verbose = FALSE)
return(unlist(strsplit(as.list(o)$address,',')))
}
get_neighb(data[1,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb(data[2,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb(data[3,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb(data[4,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb(data[200,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb(data[2000,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb(data[3000,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb(data[4000,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb(data[5000,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb(data[6000,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb(data[7000,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb(data[8000,] %>% select(LONGITUDE.x,LATITUDE.x))
get_neighb(data[82780,] %>% select(LONGITUDE.x,LATITUDE.x))
mapply(get_neighb, data[1:5,] %>% select(LONGITUDE.x,LATITUDE.x)%>% c)
get_neighb = function(la,lo){
#print(d)
o=reverse_geo(lat = la, long = lo, method = 'geocodio', verbose = FALSE)
return(unlist(strsplit(as.list(o)$address,',')))
}
data %>% mutate(neighbourhood=get_neighb(LATITUDE.x,LONGITUDE.x))
data[1:10,] %>% mutate(neighbourhood=get_neighb(LATITUDE.x,LONGITUDE.x))
get_neighb = function(la,lo){
#print(d)
o=reverse_geo(lat = la, long = lo, method = 'geocodio', verbose = FALSE)
return(unlist(strsplit(as.list(o)$address,','))[2])
}
data[1:10,] %>% mutate(neighbourhood=get_neighb(LATITUDE.x,LONGITUDE.x))
data %>% mutate(neighbourhood=get_neighb(LATITUDE.x,LONGITUDE.x)) -> data
nrow(data)
seq(1,nrow(data),10000)
s = seq(1,nrow(data),10000)
for(a in seq(1,nrow(data),10000)){
b  = min(a+10000,nrow(data))
data[a:b,] %>% mutate(neighbourhood=get_neighb(LATITUDE.x,LONGITUDE.x)) -> data[a:b,]
}
data %>% filter(is.na(LONGITUDE.x))
data %>% filter(LONGITUDE.x==NA)
data %>% filter(LONGITUDE.x==1)
data %>% filter(LONGITUDE.x!=1)
data %>% filter(LONGITUDE.x==1)
(data %>% filter(LONGITUDE.x==1))
(data %>% filter(LONGITUDE.x==1))[1,]
maxr = nrow(data%>% filter(LONGITUDE.x==1))
for(a in seq(1,maxr,10000)){
b  = min(a+10000,maxr)
(data%>% filter(LONGITUDE.x==1))[a:b,]
%>% mutate(neighbourhood=get_neighb(LATITUDE.x,LONGITUDE.x)) ->
(data%>% filter(LONGITUDE.x==1))[a:b,]
}
maxr = nrow(data%>% filter(LONGITUDE.x==1))
for(a in seq(1,maxr,10000)){
b  = min(a+10000,maxr)
(data%>% filter(LONGITUDE.x==1))[a:b,] %>%
mutate(neighbourhood=get_neighb(LATITUDE.x,LONGITUDE.x)) ->
(data%>% filter(LONGITUDE.x==1))[a:b,]
}
maxr
maxr = nrow(data%>% filter(LONGITUDE.x!=1))
for(a in seq(1,maxr,10000)){
b  = min(a+10000,maxr)
(data%>% filter(LONGITUDE.x!=1))[a:b,] %>%
mutate(neighbourhood=get_neighb(LATITUDE.x,LONGITUDE.x)) ->
(data%>% filter(LONGITUDE.x!=1))[a:b,]
}
a
b
(data%>% filter(LONGITUDE.x!=1))[a:b,]
(data%>% filter(LONGITUDE.x!=1))[a:b,] %>%
mutate(neighbourhood=get_neighb(LATITUDE.x,LONGITUDE.x))
for(i in 1:1000){
if(data$LATITUDE.x[i]!=1){
data$NEIGH[i] = get_neighb(data$LATITUDE.x[i],data$LONGITUDE.x[i])
}
}
data[1:1000,] %>%
mutate(neighbourhood=get_neighb(LATITUDE.x,LONGITUDE.x))
require(lubridate)
require(dplyr)
pdq = read.csv('./data/pdq.csv')
interv = read.csv('./data/interventionscitoyendo.csv')
# convert "POSTE DE QUARTIER ID" to only the ID
pdq$PDQ = mapply( function(d) strsplit(d,'POSTE DE QUARTIER ')[[1]][2],pdq$DESC_LIEU)
# Join the two dataframe based on the PDQ number
data = merge(interv, pdq, by='PDQ', all.x = TRUE)
names(data)
# Keep only relevant columns
data %>% select( CATEGORIE, DATE, QUART, NOM_TEMP, MUN_TEMP,
LONGITUDE.x, LATITUDE.x) -> data
# Translate Categories and day time
catg.fr = table(data$CATEGORIE) %>% names
catg.en = c("Resulting Death", "Break and Enter", "Mischief", "Auto Contents",
"Auto theft", "Robbery")
catg.rep = function(c) catg.en[which(catg.fr==c)]
quart.fr = table(data$QUART) %>% names
quart.en = c('Day', 'Night', 'Evening')
quart.rep = function(c) quart.en[which(quart.fr==c)]
# Apply changes and extract the Year and month
data %>% mutate(CATEGORIE = mapply(catg.rep,CATEGORIE),
MONTH = month(as.Date(DATE, "%Y-%m-%d")),
YEAR = year(as.Date(DATE, "%Y-%m-%d")),
QUART = mapply(quart.rep, QUART),
STREET = NOM_TEMP, NOM_TEMP = NULL,
MUNICIP = MUN_TEMP, MUN_TEMP = NULL) -> data
#-------------------------------------------------------------------
# Discard obsevations in May 2021 since the data isn't complete atm.
data %>% filter( !(YEAR ==2021 & MONTH==5 )) -> data
for(i in 1:nrow(data)){
if(data$LATITUDE.x[i]!=1){
data$NEIGH[i] = get_neighb(data$LATITUDE.x[i],data$LONGITUDE.x[i])
}
else{
dat$NEIGH[i] = "UNKNOWN"
}
}
cat(i, ' ')
i%%1000==0
1000%%1000
1001%%1000
2001%%1000
2000%%1000
for(i in 1:nrow(data)){
if(data$LATITUDE.x[i]!=1){
data$NEIGH[i] = get_neighb(data$LATITUDE.x[i],data$LONGITUDE.x[i])
}
else{
dat$NEIGH[i] = "UNKNOWN"
}
if(i%%1000==0){cat(i, ' ')}
}
i
for(i in 1:nrow(data)){
if(data$LATITUDE.x[i]!=1){
data$NEIGH[i] = get_neighb(data$LATITUDE.x[i],data$LONGITUDE.x[i])
}
else{
data$NEIGH[i] = "UNKNOWN"
}
if(i%%1000==0){cat(i, ' ')}
}
i
get_neighb(data$LATITUDE.x[1:5],data$LONGITUDE.x[1:5])
get_neighb = function(la,lo){
#print(d)
o=reverse_geo(lat = la, long = lo, method = 'geocodio', full_results = TRUE,
verbose = FALSE)
return(unlist(strsplit(as.list(o)$address,','))[2])
}
mapply(get_neighb, data[1:5,] %>% select(LONGITUDE.x,LATITUDE.x)%>% c)
get_neighb(data$LATITUDE.x[1:5],data$LONGITUDE.x[1:5])
get_neighb(data$LATITUDE.x[1:5,],data$LONGITUDE.x[1:5,])
get_neighb(data$LATITUDE.x[1:5],data$LONGITUDE.x[1:5])
return(unlist(strsplit(as.list(o)$address,',')))
get_neighb = function(la,lo){
#print(d)
o=reverse_geo(lat = la, long = lo, method = 'geocodio', full_results = TRUE,
verbose = FALSE)
return(unlist(strsplit(as.list(o)$address,',')))
}
get_neighb(data$LATITUDE.x[1:5],data$LONGITUDE.x[1:5])
get_neighb = function(la,lo){
#print(d)
o=reverse_geo(lat = la, long = lo, method = 'geocodio', full_results = TRUE,
verbose = FALSE)
out = mapply(function(d)unlist(strsplit(as.list(d)$address,','))[2],o )
return(out)
}
get_neighb(data$LATITUDE.x[1:5],data$LONGITUDE.x[1:5])
la = data$LATITUDE.x[1:5]; lo=data$LONGITUDE.x[1:5]
#print(d)
o=reverse_geo(lat = la, long = lo, method = 'geocodio', full_results = TRUE,
verbose = FALSE)
o
as.list(o)
#print(d)
o=reverse_geo(lat = la, long = lo, method = 'geocodio',
verbose = FALSE)
as.list(o)
mapply(function(d)unlist(strsplit(d,','))[2],as.list(o)$address )
get_neighb = function(la,lo){
#print(d)
o=reverse_geo(lat = la, long = lo, method = 'geocodio',
verbose = FALSE)
out = mapply(function(d)unlist(strsplit(d,','))[2],as.list(o)$address)
return(out)
}
get_neighb(data$LATITUDE.x[1:5],data$LONGITUDE.x[1:5])
get_neighb(data$LATITUDE.x[1:100],data$LONGITUDE.x[1:100])
get_neighb(data$LATITUDE.x[1:100],data$LONGITUDE.x[1:100]) %>% c
data$LATITUDE.x[1:100]
maxr = nrow(data%>% filter(LONGITUDE.x!=1))
for(a in seq(1,maxr,10000)){
b  = min(a+10000,maxr)
(data%>% filter(LONGITUDE.x!=1))[a:b,] %>%
mutate(neighbourhood=get_neighb(LATITUDE.x,LONGITUDE.x)) ->
(data%>% filter(LONGITUDE.x!=1))[a:b,]
}
a
maxr = nrow(data)
for(a in seq(1,maxr,10000)){
b  = min(a+10000,maxr)
data[a:b,] %>%
mutate(neighbourhood=get_neighb(LATITUDE.x,LONGITUDE.x)) ->
(data)[a:b,]
}
maxr = nrow(data)
for(a in seq(1,maxr,10000)){
b  = min(a+10000,maxr)
data$neighbourhood[a:b] = get_neighb(data$LATITUDE.x[a:b],data$LONGITUDE.x[a:b])
}
a
b
get_neighb(data$LATITUDE.x[a:b],data$LONGITUDE.x[a:b])
b=get_neighb(data$LATITUDE.x[1:500],data$LONGITUDE.x[1:500]) %>% c
b=get_neighb(data$LATITUDE.x[1:1000],data$LONGITUDE.x[1:1000]) %>% c
b=get_neighb(data$LATITUDE.x[1:1001],data$LONGITUDE.x[1:1001]) %>% c
data$neighbourhood = ""
maxr = nrow(data)
for(a in seq(1,maxr,10000)){
b  = min(a+10000,maxr)
data$neighbourhood[a:b] = get_neighb(data$LATITUDE.x[a:b],data$LONGITUDE.x[a:b])
}
data$neighbourhood[a:b] = get_neighb(data$LATITUDE.x[a:b],data$LONGITUDE.x[a:b])
b
l= get_neighb(data$LATITUDE.x[a:b],data$LONGITUDE.x[a:b])
la = data$LATITUDE.x[1:b]; lo=data$LONGITUDE.x[1:b]
b=get_neighb(data$LATITUDE.x[1:b],data$LONGITUDE.x[1:1001]) %>% c
b=get_neighb(data$LATITUDE.x[1:b],data$LONGITUDE.x[1:b]) %>% c
b
b+1
b=get_neighb(data$LATITUDE.x[1:10000],data$LONGITUDE.x[1:10000]) %>% c
data$LATITUDE.x[1:10000]
b=get_neighb(data$LATITUDE.x[1:9000],data$LONGITUDE.x[1:9000]) %>% c
b=get_neighb(data$LATITUDE.x[1:8000],data$LONGITUDE.x[1:8000]) %>% c
b=get_neighb(data$LATITUDE.x[1:5000],data$LONGITUDE.x[1:5000]) %>% c
b=get_neighb(data$LATITUDE.x[1:5000],data$LONGITUDE.x[1:3000]) %>% c
b=get_neighb(data$LATITUDE.x[1:3000],data$LONGITUDE.x[1:3000]) %>% c
b=get_neighb(data$LATITUDE.x[1:2000],data$LONGITUDE.x[1:2000]) %>% c
b=get_neighb(data$LATITUDE.x[1000:2000],data$LONGITUDE.x[1000:2000]) %>% c
b=get_neighb(data$LATITUDE.x[1000:1500],data$LONGITUDE.x[1000:1500]) %>% c
b=get_neighb(data$LATITUDE.x[1000:1300],data$LONGITUDE.x[1000:1300]) %>% c
b=get_neighb(data$LATITUDE.x[1000:1100],data$LONGITUDE.x[1000:1100]) %>% c
data$LATITUDE.x[1000:1100]
data$LONGITUDE.x[1000:1100]
b=get_neighb(data$LATITUDE.x[1000:1050],data$LONGITUDE.x[1000:1050]) %>% c
b=get_neighb(data$LATITUDE.x[1050:1080],data$LONGITUDE.x[1050:1080]) %>% c
b=get_neighb(data$LATITUDE.x[1050:1070],data$LONGITUDE.x[1050:1070]) %>% c
b=get_neighb(data$LATITUDE.x[1050:1060],data$LONGITUDE.x[1050:1060]) %>% c
b=get_neighb(data$LATITUDE.x[1060:1070],data$LONGITUDE.x[1060:1070]) %>% c
data$LONGITUDE.x[1060:1070]
data$LATITUDE.x[1060:1070]
la = data$LATITUDE.x[1060:1070]; lo=data$LONGITUDE.x[1060:1070]
#print(d)
o=reverse_geo(lat = la, long = lo, method = 'geocodio',
verbose = FALSE)
#print(d)
o=reverse_geo(lat = la, long = lo, method = 'osm',
verbose = FALSE)
#print(d)o
o=reverse_geo(lat = la, long = lo, method = 'osm',
verbose = FALSE)
o#print(d)o
mapply(function(d)unlist(strsplit(d,','))[2],as.list(o)$address)
mapply(function(d)unlist(strsplit(d,','))[3],as.list(o)$address)
get_neighb = function(la,lo){
#print(d)o
o=reverse_geo(lat = la, long = lo, method = 'osm',
verbose = FALSE)
out = mapply(function(d)unlist(strsplit(d,','))[3],as.list(o)$address)
return(out)
}
data$neighbourhood = ""
maxr = nrow(data)
for(a in seq(1,maxr,10000)){
b  = min(a+10000,maxr)
data$neighbourhood[a:b] = get_neighb(data$LATITUDE.x[a:b],data$LONGITUDE.x[a:b])
}
a
b=get_neighb(data$LATITUDE.x[1060:1070],data$LONGITUDE.x[1060:1070]) %>% c
b=get_neighb(data$LATITUDE.x[1060:1070],data$LONGITUDE.x[1060:1070]) %>% c
get_neighb = function(la,lo){
#print(d)o
o=reverse_geo(lat = la, long = lo, method = 'geocoder',
verbose = FALSE)
out = mapply(function(d)unlist(strsplit(d,','))[3],as.list(o)$address)
return(out)
}
